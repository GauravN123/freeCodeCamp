package brickBreaker;

import javax.swing.*;

public class brickBreaker {

    public static void main(String[] args) {

        JFrame obj = new JFrame();
        gameplay gameplay = new gameplay();
        obj. setBounds(10,10,700 , 600);
        obj.setTitle("Breakout Ball");
        obj.setResizable(false);
        obj.setVisible(true);
        obj.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        obj.add(gameplay);


    }
}
gameplay.java

package brickBreaker;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.Timer;



    public class gameplay extends JPanel implements KeyListener, ActionListener {
        public static void main(String[] args) {

        }

        private boolean play = false;
        private int score = 0;

        private int totalBricks = 21;
        private Timer time;
        private int delay = 8;

        private int playerX = 310;

        private int ballposX = 120;
        private int ballposY = 350;
        private int ballXdir = -1;
        private int ballYdir =  -2;

        private MapGenerator map;





        public gameplay() {
            map = new MapGenerator(3,7);
            addKeyListener(this);
            setFocusable(true);
            setFocusTraversalKeysEnabled(false);

           Timer Timer  = new Timer(delay, this);
           Timer.start();

        }

        public void paint(Graphics g)
        {
            //background
            g.setColor(Color.BLACK);
            g.fillRect(1,1,692,592);

            //drawing map
            map.draw((Graphics2D)g);

            //borders
            g.setColor(Color.yellow);
            g.fillRect(0,0,3,592);
            g.fillRect(0,0,692,3);
            g.fillRect(692,0,3,592);

            //scores
            g.setColor(Color.WHITE);
            g.setFont(new Font("serif",Font.BOLD,25));
            g.drawString(""+score, 590,30);


            //the paddle
            g.setColor(Color.green);
            g.fillRect(playerX , 550,100,8);

            //the ball
            g.setColor(Color.yellow);
            g.fillOval(ballposX , ballposY ,20,20);

            if(totalBricks <=0){
                play =false;
                ballXdir = 0;
                ballYdir = 0;
                g.setColor(Color.red);
                g.setFont(new Font("serif",Font.BOLD,25));
                g.drawString("You Won", 260,300);

                g.setFont(new Font("serif",Font.BOLD,25));
                g.drawString("Press Enter to Restart", 190,350);


            }
            if(ballposY > 570){
                play =false;
                ballXdir = 0;
                ballYdir = 0;
                g.setColor(Color.red);
                g.setFont(new Font("serif",Font.BOLD,25));
                g.drawString("Game Over, Scores:", 190,300);

                g.setFont(new Font("serif",Font.BOLD,25));
                g.drawString("Press Enter to Restart", 190,350);


            }
            g.dispose();





        }



        @Override
        public void actionPerformed(ActionEvent e) {
        //  Timer.start();
            if(play)
            {
                if(new Rectangle(ballposX , ballposY, 20, 20).intersects(new Rectangle(playerX, 550, 100,8))) {
                    ballYdir = -ballYdir;
                }
                for (int i=0; i<map.map.length; i++){
                    for (int j = 0; j< map.map[0].length; j++){
                        if(map.map[i][j] > 0 ){
                             int brickX = j*map.brickWidth + 80;
                             int brickY = i*map.brickHeight + 50;
                             int brickWidth = map.brickWidth;
                             int brickHeight = map.brickHeight;

                             Rectangle rect = new Rectangle(brickX, brickY,brickWidth,brickHeight );
                             Rectangle ballRect = new Rectangle(ballposX, ballposY, 20,20);
                             Rectangle brickRect = rect;

                             if ( ballRect.intersects((brickRect))){
                                 map.setBirickValue(0,i,j);
                                 totalBricks --;
                                 score += 5;
                                 if(ballposX + 19 <= brickRect.x || ballposX +1 >= brickRect.x + brickRect.width){
                                     ballXdir = -ballXdir;

                                 }
                                 else{
                                     ballYdir = -ballYdir;

                                 }
                                  break;


                            }
                        }
                    }
                }
            }
            {
                ballposX += ballXdir;
                ballposY += ballYdir;
                if(ballposX < 0){
                    ballXdir = -ballXdir;
                }
                if(ballposY < 0) {
                    ballYdir = -ballYdir;
                }
                if(ballposX > 670){
                    ballXdir =-ballXdir;
                }
            }

            repaint();


        }

        @Override
        public void keyTyped(KeyEvent e) {}
        @Override
        public void keyReleased(KeyEvent e) {}



        @Override
        public void keyPressed(KeyEvent e) {
            if(e.getKeyCode() == KeyEvent.VK_RIGHT)
            {
                if(playerX >= 600)
                {
                    playerX = 600;
                }
                else
                {
                    moveRight();
                }


            }
            if(e.getKeyCode() == KeyEvent.VK_LEFT)
            {
                if(playerX < 10)
                {
                    playerX = 10;
                }
                else
                {
                    moveLeft();
                }

            }
            if(e.getKeyCode() == KeyEvent.VK_ENTER){
                if(play){
                    play = true;
                    ballposX = 120;
                    ballposY = 350;
                    ballXdir = -1;
                    ballYdir = -2;
                    playerX = 310;
                    score = 0;
                    totalBricks = 21;
                    map = new MapGenerator(3,7);

                    repaint();
                }
            }


        }
        public void moveRight()
        {
            play = true;
            playerX += 20;

        }
        public void moveLeft()
        {
            play = true;
            playerX -= 20;

        }


    }


MapGenerator.java
package brickBreaker;

import java.awt.*;

public class MapGenerator {
    public int map[][];
    public int brickWidth;
    public int brickHeight;
    public MapGenerator(int row,int col){
        map = new int[row][col];
        for(int i = 0; i < map.length; i++){
            for(int j=0; j < map[0].length; j++){
                map[i][j] = 1;

            }
        }
        brickWidth = 540/col;
        brickHeight = 150 /row;

    }
    public void draw(Graphics2D g){
        for(int i = 0; i< map.length; i++){
            for(int j=0; j< map[0].length; j++){
                if(map[i][j] >0) {
                    g.setColor(Color.WHITE);
                    g.fillRect(j* brickWidth +80, i*brickHeight+50 , brickWidth, brickHeight);
g.setStroke(new BasicStroke(3));
g.setColor(Color.BLACK);
                    g.drawRect(j* brickWidth +80, i*brickHeight+50 , brickWidth, brickHeight);
                }

            }
        }

    }
    public void setBirickValue (int value, int row, int col){
        map[row][col] = value;
    }

}
